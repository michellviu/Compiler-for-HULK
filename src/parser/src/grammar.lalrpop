use std::str::FromStr;
use crate::ast;
use crate::tokens;
use crate::Expression;

grammar;

pub Program: ast::Program = {
    <list:ExpressionList> => ast::Program::new(list),
};


pub ExpressionList: ast::ExpressionList = {
    <e:Expression> <rest:ExpressionList> => {
        let mut exprs = vec![e];
        exprs.extend(rest.expressions);
        ast::ExpressionList::new(exprs)
    },
    <e:Expression> =>  ast::ExpressionList::new(vec![e]),
};


pub Expression: ast::Expression = {
    Addition,
};

pub Addition: ast::Expression = {
    <l:Addition> <op:PlusMinusBinary> <r:Factor> => ast::Expression::new_binary_op(l, r, op),
    Factor,
};

PlusMinusBinary: tokens::BinOp = {
   <s: @L> <t: "+"> <e: @R> => tokens::BinOp::Plus(tokens::Position::new(s, e)),
   <s: @L> <t: "-"> <e: @R> => tokens::BinOp::Minus(tokens::Position::new(s, e)),
};

Factor: ast::Expression = {
    <l:Factor> <op:FactorOp> <r:Term> => ast::Expression::new_binary_op(l, r, op),
    Term,
};

FactorOp: tokens::BinOp = {
   <s: @L> <t: "*"> <e: @R> => tokens::BinOp::Mul(tokens::Position::new(s, e)),
   <s: @L> <t: "/"> <e: @R> => tokens::BinOp::Div(tokens::Position::new(s, e)),
   <s: @L> <t: "%"> <e: @R> => tokens::BinOp::Mod(tokens::Position::new(s, e)),
};

Term: ast::Expression = {
    <a: Atom> => ast::Expression::new_atom(a),
};

pub Atom: ast::Atom = {
    <n:NumLiteral> => 
        ast::Atom::NumberLiteral(n),
    <b:BoolLiteral> =>
        ast::Atom::BooleanLiteral(b),
    <s:StrLiteral> =>
        ast::Atom::StringLiteral(s),
    <i:Identifier> => 
        ast::Atom::Variable(i),
    <i:Instruction> => 
        i,
    // GroupedExpression,
    // PrintExpression,
    // LetExpression,
    // IfElseExpression,
    // Block,

}

pub Instruction: ast::Atom = {
    <s:Statement> ";" => s,
    <e:ExprNoSemi> => e,
};

// Instrucciones que requieren ;
pub Statement: ast::Atom = {
    PrintExpression,
    LetExpression,
};

// Instrucciones que NO requieren ;
pub ExprNoSemi: ast::Atom = {
    IfElseExpression,
    Block,
    GroupedExpression,

};

pub Block: ast::Atom = {
    <o:OpenBrace> <e:ExpressionList> <c:CloseBrace> => {
        ast::Atom::new_block(o, e, c)
    },
};

LetExpression: ast::Atom = {
    <k: Let> <a:AssignmentList> <i:In> <e:Atom>
        => ast::Atom::new_let_expression(k, a, i, e),
}

IfElseExpression: ast::Atom = {
    <if_token:If> "(" <cond:Expression> ")" <then_branch:Atom>
        <elifs:ElifBranchesOpt> <else_branch:ElseBranch> =>
            ast::Atom::new_ifelse(
                if_token,
                Box::new(cond),
                Box::new(then_branch),
                elifs,
                else_branch.0,
                Box::new(else_branch.1)
            ),
};


#[inline]
ElifBranchesOpt: Vec<(tokens::Keyword, ast::Expression, ast::Atom)> = {
    <e:ElifBranches> => e,
    => vec![],
};


ElifBranches: Vec<(tokens::Keyword, ast::Expression, ast::Atom)> = {
    <head:ElifBranch> <tail:ElifBranches> => {
        let mut v = vec![head];
        v.extend(tail);
        v
    },
    <head:ElifBranch> => vec![head],
};

ElifBranch: (tokens::Keyword, ast::Expression, ast::Atom) = {
    <elif_token:Elif> "(" <cond:Expression> ")" <body:Atom>
        => (elif_token, cond, body),
};

ElseBranch: (tokens::Keyword, ast::Atom) = {
    <else_token:Else> <body:Atom> => (else_token, body),
};

PrintExpression: ast::Atom = {
    <t:Print> "(" <e:Expression> ")" => 
        ast::Atom::new_print(t, e),
};


Assignment: ast::Assignment = {
    <id:Identifier> <o:EqualOperator> <e:Expression>
        => ast::Assignment::new(id, o, e),
}

EqualOperator: tokens::BinOp = {
    <s: @L> "=" <e: @R>
        => tokens::BinOp::Equal(tokens::Position::new(s, e)),
}

AssignmentList:  Vec<ast::Assignment> = {
    <a:Assignment> "," <rest:AssignmentList> => {
        let mut assignments = vec![a];
        assignments.extend(rest);
        assignments
    },
    <a:Assignment> => vec![a],
};

GroupedExpression: ast::Atom = {
     "(" <e: Expression> ")"
        => ast::Atom::new_grouped_expression(e),
}

OpenBrace: tokens::GroupingOperator = {
    <s: @L> "{" <e: @R>
        => tokens::GroupingOperator::OpenBrace(tokens::Position::new(s, e)),
}

CloseBrace: tokens::GroupingOperator = {
    <s: @L> "}" <e: @R>
        => tokens::GroupingOperator::CloseBrace(tokens::Position::new(s, e)),
}

Let: tokens::Keyword = {
    <s: @L> "let" <e: @R>
        => tokens::Keyword::Let(tokens::Position::new(s, e)),
};

In: tokens::Keyword = {
    <s: @L> "in" <e: @R>
        => tokens::Keyword::In(tokens::Position::new(s, e)),
};

Print: tokens::Keyword = {
    <s: @L> "print" <e: @R>
        => tokens::Keyword::Print(tokens::Position::new(s, e)),
};

If: tokens::Keyword = {
    <s: @L> "if" <e: @R>
        => tokens::Keyword::If(tokens::Position::new(s, e)),
};

Elif: tokens::Keyword = {
    <s: @L> "elif" <e: @R>
        => tokens::Keyword::Elif(tokens::Position::new(s, e)),
};

Else: tokens::Keyword = {
    <s: @L> "else" <e: @R>
        => tokens::Keyword::Else(tokens::Position::new(s, e)),
};

NumLiteral: tokens::Literal   = {
   <s: @L> <v:r"[0-9]+"> <e: @R> => tokens::Literal::Number(
        i32::from_str(v).unwrap(),
        tokens::Position::new(s, e)
    ),
};

BoolLiteral: tokens::Literal = {
   <s: @L> <v:"true"> <e: @R> => tokens::Literal::Bool(
        true,
        tokens::Position::new(s, e)
    ),
   <s: @L> <v:"false"> <e: @R> => tokens::Literal::Bool(
        false,
        tokens::Position::new(s, e)
    ),
};

StrLiteral: tokens::Literal = {
   <s: @L> <v:r#""([^"\\]|\\.)*""#> <e: @R> => tokens::Literal::Str(
        v.to_string(),
        tokens::Position::new(s, e)
    ),
};

Identifier: tokens::Identifier = {
   <s: @L> <n: r"[a-zA-Z_][a-zA-Z0-9_]*"> <e: @R> => tokens::Identifier::new(
        s,e,n
    ),
};

Semicolon: tokens::SpecialOp = {
    <s: @L> ";" <e: @R> => tokens::SpecialOp::Semicolon(tokens::Position::new(s, e)),
};