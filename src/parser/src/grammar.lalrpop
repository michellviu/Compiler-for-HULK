use std::str::FromStr;
use crate::ast;
use crate::tokens;
use crate::Expression;

grammar;

pub Program: ast::Program = {
    <list:ExpressionList> => ast::Program::new(list),
};

pub Block: ast::Atom = {
    <o:OpenBrace> <e:ExpressionList> <c:CloseBrace> => {
        ast::Atom::new_block(o, e, c)
    },
};

pub ExpressionList: ast::ExpressionList = {
    // Bloque vacío
    => ast::ExpressionList::new(vec![]),
    
    // Un solo Expression sin punto y coma final
    <e:Expression> => ast::ExpressionList::new(vec![e]),

    // Lista de expresiones separadas por punto y coma
    <list:NonEmptyExpressionList> => ast::ExpressionList::new(list),
};

// Esta es la regla recursiva para múltiples expresiones con `;`
NonEmptyExpressionList: Vec<Expression> = {
    <e:Expression> ";" <rest:NonEmptyExpressionList> => {
        let mut v = vec![e];
        v.extend(rest);
        v
    },
    <e:Expression> ";" => vec![e], // Última expresión seguida de ;
};

pub Expression: ast::Expression = {
    IfElseExpression,
    WhileExpression,
    LetExpression,
    PrintExpression,
    Addition,
};

WhileExpression: ast::Expression = {
    <tk:While> "(" <cond:Expression> ")" <body:Expression> =>
        ast::Expression::new_while(ast::While::new(tk,cond,body)),
};

PrintExpression: ast::Expression = {
    <s: @L> "print" "(" <e:Expression> ")" <e2: @R> => 
        ast::Expression::new_print(e, tokens::Position::new(s, e2)),
};

pub Addition: ast::Expression = {
    <l:Addition> <op:PlusMinusBinary> <r:Factor> => ast::Expression::new_binary_op(l, r, op),
    Factor,
};

PlusMinusBinary: tokens::BinOp = {
   <s: @L> "+" <e: @R> => tokens::BinOp::Plus(tokens::Position::new(s, e)),
   <s: @L> "-" <e: @R> => tokens::BinOp::Minus(tokens::Position::new(s, e)),
};

Factor: ast::Expression = {
    <l:Factor> <op:FactorOp> <r:Term> => ast::Expression::new_binary_op(l, r, op),
    Term,
};

FactorOp: tokens::BinOp = {
   <s: @L> "*" <e: @R> => tokens::BinOp::Mul(tokens::Position::new(s, e)),
   <s: @L> "/" <e: @R> => tokens::BinOp::Div(tokens::Position::new(s, e)),
   <s: @L> "%" <e: @R> => tokens::BinOp::Mod(tokens::Position::new(s, e)),
};

Term: ast::Expression = {
    <a: Atom> => ast::Expression::new_atom(a),
};

pub Atom: ast::Atom = {
    <n:NumLiteral> => ast::Atom::NumberLiteral(n),
    <b:BoolLiteral> => ast::Atom::BooleanLiteral(b),
    <s:StrLiteral> => ast::Atom::StringLiteral(s),
    <i:Identifier> => ast::Atom::Variable(i),
    GroupedExpression,
    Block,
};

TerminatedExpression: ast::Expression = {
    <e:Expression> ";" => e,
};

IfElseExpression: ast::Expression = {
    <if_kw:If> "(" <cond:Expression> ")" <then_branch:TerminatedExpression>
    <elifs:ElifBranchesOpt> <else_branch:ElseBranch> =>
        ast::Expression::new_ifelse(ast::ifelse::IfElse::new(
            if_kw,
            cond,
            then_branch,
            elifs,
            Some(else_branch.0),
            Some(else_branch.1)
        )),
};

ElifBranchesOpt: Vec<(tokens::Keyword, ast::Expression, ast::Expression)> = {
    <e:ElifBranches> => e,
    => vec![],
};

ElifBranches: Vec<(tokens::Keyword, ast::Expression, ast::Expression)> = {
    <head:ElifBranch> <tail:ElifBranches> => {
        let mut v = vec![head];
        v.extend(tail);
        v
    },
    <head:ElifBranch> => vec![head],
};

ElifBranch: (tokens::Keyword, ast::Expression, ast::Expression) = {
    <elif_kw:Elif> "(" <cond:Expression> ")" <body:TerminatedExpression> =>
        (elif_kw, cond, body),
};

ElseBranch: (tokens::Keyword, ast::Expression) = {
    <else_kw:Else> <body:TerminatedExpression> => (else_kw, body),
};

LetExpression: ast::Expression = {
    <k: Let> <a:AssignmentList> <i:In> <e:Expression> =>
        ast::Expression::new_letin(
            ast::LetIn::new(k, a, i, e)
        ),
};

Assignment: ast::Assignment = {
    <id:Identifier> <o:EqualOperator> <e:Expression> =>
        ast::Assignment::new(id, o, e),
};

EqualOperator: tokens::BinOp = {
    <s: @L> "=" <e: @R> => tokens::BinOp::Equal(tokens::Position::new(s, e)),
};

AssignmentList: Vec<ast::Assignment> = {
    <a:Assignment> "," <rest:AssignmentList> => {
        let mut assignments = vec![a];
        assignments.extend(rest);
        assignments
    },
    <a:Assignment> => vec![a],
};

GroupedExpression: ast::Atom = {
     "(" <e: Expression> ")" => ast::Atom::new_grouped_expression(e),
};

OpenBrace: tokens::GroupingOperator = {
    <s: @L> "{" <e: @R> => tokens::GroupingOperator::OpenBrace(tokens::Position::new(s, e)),
};

CloseBrace: tokens::GroupingOperator = {
    <s: @L> "}" <e: @R> => tokens::GroupingOperator::CloseBrace(tokens::Position::new(s, e)),
};

Let: tokens::Keyword = {
    <s: @L> "let" <e: @R> => tokens::Keyword::Let(tokens::Position::new(s, e)),
};

While: tokens::Keyword = {
    <s:@L> "while" <e:@R> => tokens::Keyword::While(tokens::Position::new(s,e)),
}

In: tokens::Keyword = {
    <s: @L> "in" <e: @R> => tokens::Keyword::In(tokens::Position::new(s, e)),
};

NumLiteral: tokens::Literal = {
   <s: @L> <v: r"[0-9]+"> <e: @R> => tokens::Literal::Number(
        i32::from_str(v).unwrap(),
        tokens::Position::new(s, e)
    ),
};

BoolLiteral: tokens::Literal = {
   <s: @L> "true" <e: @R> => tokens::Literal::Bool(true, tokens::Position::new(s, e)),
   <s: @L> "false" <e: @R> => tokens::Literal::Bool(false, tokens::Position::new(s, e)),
};

StrLiteral: tokens::Literal = {
   <s: @L> <v: r#""([^"\\]|\\.)*""#> <e: @R> => tokens::Literal::Str(
        v.to_string(),
        tokens::Position::new(s, e)
    ),
};

Identifier: tokens::Identifier = {
   <s: @L> <n: r"[a-zA-Z_][a-zA-Z0-9_]*"> <e: @R> =>
        tokens::Identifier::new(s, e, n),
};

If: tokens::Keyword = {
    <s: @L> "if" <e: @R> => tokens::Keyword::If(tokens::Position::new(s, e)),
};

Elif: tokens::Keyword = {
    <s: @L> "elif" <e: @R> => tokens::Keyword::Elif(tokens::Position::new(s, e)),
};

Else: tokens::Keyword = {
    <s: @L> "else" <e: @R> => tokens::Keyword::Else(tokens::Position::new(s, e)),
};
